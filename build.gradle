import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}

plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'groovy'
    id 'idea'
    id 'org.asciidoctor.jvm.convert'
    id 'com.palantir.graal'
}
apply plugin: 'org.asciidoctor.jvm.convert'

wrapper {
    gradleVersion = '7.4'
}

group 'io.github.brianwyka'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    annotationProcessor "info.picocli:picocli-codegen:$picocliVersion"
}

dependencies {
    testImplementation "org.codehaus.groovy:groovy:$groovyVersion"
    testImplementation platform("org.spockframework:spock-bom:$spockVersion")
    testImplementation "org.spockframework:spock-core"
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

// Jacoco Integration
jacocoTestReport {
    dependsOn test
}
jacoco {
    toolVersion = "$jacocoVersion"
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = ['**/picocli/**/*.*']
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.90 // 90%
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

application {
    mainClass.set("$mainClassFqn")
}

jar {
    manifest {
        attributes "Main-Class": application.mainClass.get()
    }
}

task uberJar(type: Jar) {
    manifest {
        attributes "Main-Class": application.mainClass.get()
    }
    archiveClassifier.set('') // Overwrites original JAR
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    mainClass.set('picocli.codegen.docgen.manpage.ManPageGenerator')
    args application.mainClass.get(), "--outdir=${project.buildDir}/generated-picocli-docs", "-v"
}

task copyResources(type: Copy) {
    from ("src/main/asciidoc") {
        include '**/*.css'
    }
    into("${rootDir}/gh-pages")
}
asciidoctor.dependsOn copyResources

apply plugin: 'org.asciidoctor.jvm.convert'
asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${rootDir}/src/main/asciidoc")
    outputDir = file("${rootDir}/gh-pages")
    logDocuments = true
    attributes([
        generateddocs: "${project.buildDir}/generated-picocli-docs"
    ])
    outputOptions {
        backends = ['html5']
    }
}
asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${project.buildDir}/generated-picocli-docs")
    outputDir = file("${rootDir}/gh-pages/manpages")
    logDocuments = true
    outputOptions {
        backends = ['manpage']
    }
}
assemble.dependsOn(asciidoctor)

build.finalizedBy(uberJar)

graal {
    mainClass application.mainClass.get()
    outputName "$nativeImageOutputName"
    graalVersion "22.0.0.2"
    javaVersion "$sourceCompatibility"
    option '-H:+ReportExceptionStackTraces'
    option '--allow-incomplete-classpath'
    if (DefaultNativePlatform.currentOperatingSystem.isLinux()) {
        option '--static'
    }
}

tasks {
    nativeImage {
        dependsOn(uberJar)
    }
}